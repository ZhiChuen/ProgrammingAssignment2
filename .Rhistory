license()
clear()
clean()
erase()
clear
clean
erasae
erase
empty()
empty
clear
pwd
printwd
printwd()
pwd()
printwd()
q()
print()
printwd()
print(wd)
pwd
pwd()
getwd()
x <-1
print(x)
x<-2
print(x-1)
msg <-"hello world"
print(msg)
x
x <- 2:10
x
x <- c(3,4)
x
vector("numeric",10)
vector ("character",2)
matrix(3,2)
matrix(2,3)
matrix(nrow=2,ncol=3)
matrix(1:6,nrow=2,ncol=3)
x
x-<`:10
x <- 1:10
x
dim m <-c(2,5)
dim(m) <- c(2,5)
dim (x) <-c(2,5)
x
class(x)
dimnames(x) <-list(c("telstra","Defence"),c("a","b","C","d","E"))
x
q()
x <-matrix(1:6,2,3)
x
x[1,2]
x[,2]
q90
q()
swirl()
swirl()
library(swirl)
swirl()
num_vect <- c(0.5,55,-10,6)
tf <-num_vect<1
tf
num_vect >=6
my_char <- ("My","name","is")
my_char <- c("My", "name", "is")
my_char
paste (my_char, collapse = " ")
my_name <- c(my_char, "Zhi Chuen Tan")
my_name
paste (my_name,collapse = " ")
paste ("HellO", "world!",sep = " ")
paste("Hello","world!",sep = " ")
paste(c(1,2,3),c("X","Y","Z"),sep="")
paste(1:3, c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep= "-")
q()
library(swirl)
swirl()
x <-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z <- rep(NA,1000)
myData <- sample(c(y,z),100)
myNA <-is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3],x[5],x[7])
x[x(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
name(vect)
names(vect)
vect2 <-c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
indentical(vect,vect2)
identical(vect,vect2)
vect ["bar'"]
vect["bar"]
vect[c("foo","bar")]
myVector <- [1:20]
myVector <-1:20
myVector
dim(myVector)
length(myVector)
dim (myVector) <-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <-myVector
?`matrix`
myMatrix2 <- matrix(1:30,nrow = 4, ncol = 5)
identical (myMarix,myMatrix2)
identical (myMatrix,myMatrix2)
patients <- c("Bill","Gina", "Kelly", "Sean")
cbind(patients,myMatrix)
myData <-data.frame(patients, myMatrix)
myData
class(myDaya)
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(myData) <-cnames
myData
clear
clear()
q()
y <-10
f <-function (x){
y<-2
y^2 + g(x)
}
g(x){
x*y
}
y <-10
f <-function (x){
y<-2
y^2 + g(x)
}
g(x)<-function(x){
x*y
}
f(3)
f(3)
y <-10
f <-function (x){
y<-2
y^2 + g(x)
}
g<-function(x)
{
x*y
}
f(3)
remove(y,f,g)
cube <- function(x, n) {
x^3
}
cube(3)
remove(cube)
x<-1:10
if (x>5) {
x<-0
}
remove(x)
f <- function(x) {
g <- function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
remove(z,f)
x<-5
y<0 if(x<3){
NA
}
else {
10
}
}
x<-5
y<-if(x<3){
NA
}
else {
10
}
x<-5
y<-if(x<3){
NA
}
else {
10
}
remove(x,y)
x <-5
y<- if(x<3){}
y<- if(x<3){NA} else {10}
y
clear
q()
q()
library(dataset)
library(datasets)
data(mtcars)
mtcars
split(mtcars$mpg)
split(mtcars,mtcars$mpg)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
(split(mtcars$mpg, mtcars$cyl)
split(mtcars$mpg, mtcars$cyl)
lapply(split(mtcars$mpg, mtcars$cyl),mean)
sapply(split(mtcars$mpg, mtcars$cyl),mean)
sapply(split(mtcars$hp, mtcars$cyl),mean)
split(mtcars$hp, mtcars$cyl
split(mtcars$hp, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl),mean)
k<-sapply(split(mtcars$hp, mtcars$cyl),mean)
k
k[3]-k[1]
k[3]
k[1]
z<-k[3]-k[1]
z
rm(k.mtcars.z)
rm(k,mtcars,z)
library(datasets)
data(iris)
?iris
split(iris$Sepal.Length,$Species)
split(iris$Sepal.Length,iris.$Species)
split(iris$Sepal.Length,iris$Species)
sapply(split(iris$Sepal.Length,iris$Species),mean)
iris
k<-iris[iris.Species = "Virginica",2]
k<-iris[iris$Species = "Virginica",2]
k<-iris[iris.$Species = "Virginica",2]
iris[iris.$Species = "Virginica",]
iris[iris$Species = "Virginica",]
iris["Virginica",]
iris[Virginica,]
iris[Species = virginica,]
iris[$Species = virginica,]
iris[$Species = "virginica"]
iris[iris$Species = "virginica"]
iris(,4)
iris[,4]
iris (,iris(,4) == "virginica")
iris [],iris[,4] == "virginica")
iris [,iris[,4] == "virginica"]
iris [,iris$Species == "virginica"]
iris [,Species == "virginica"]
iris [,iris.Species == "virginica"]
iris [,iris.$Species == "virginica"]
k<-iris[iris$Species =="virginica",]
k
getwd()
tf = matrix(1:4,2,2)
tf
solve(tf)
tf %*% solve(tf)
q()
getwd()
setwd("C:/Users/d344189/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a <-makeVector(c(1:7))
a
class(a)
a
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <-makeVector()
a
a <-makeVecotr(x = c(1:7))
a <-makeVector(x = c(1:7))
cachemean(a)
a$get
a <-makeVector(x = c1:7)
a$get()
rm(a)
a <-makeVector(x = 1:7)
a$get
a$get()
a
a$setmean()
a$setmean(mean)
a$getmean()
a$getmean
cachemean(a)
cachemean(a)
rm(a)
makeVector <-function (x = (1:10))
a<-makeVector (x = 1:20)
cachemean(a)
cachemean(a)
a
a$getmean()
k = (1:4,2,2)
k = matrix(1:4,2,2)
k
solve(k)
rm(cacehmean, makeVector,a,k)
rm(cachemean)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mean) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <-makeCacheMatrix(matrix(1:4,2,2))
cachesolve(a)
cacheSolve(a)
a <-makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(a)
k = matrix(1:9,3,3)
k
solve(k)
k <-c(1,0,1)
k
k <-c(1,2,3)
k <- rbind(c(1,2,3),c(0,4,5),c(1,0,6))
k
k <-as.matrix(k)
k
rm(a)
a <-makeCacheMatrix(k)
cacheSolve(a)
cacheSolve(a)
rm(a,cacheSolve,makeCacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <-makeCacheMatrix(k)
cacheSolve(a)
solve(k)
cacheSolve(a)
a
q()
